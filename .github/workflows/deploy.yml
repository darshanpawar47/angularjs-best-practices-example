name: CI/CD Pipeline for AngularJS to AWS EC2

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1                  # Replace with your AWS region
  ECR_REPOSITORY: angularjs-best-practices-example    # Name of your ECR repository
  IMAGE_TAG: latest                      # Tag for the Docker image
  EC2_HOST: 18.234.143.185           # Replace with your EC2 public IP
  EC2_USER: ec2-user                     # Default user for Amazon Linux
  SSH_PORT: 22                           # Default SSH port

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2. Set up Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'                # AngularJS may require an older Node version

      # 3. Install dependencies and build the application
      - name: Install Dependencies
        run: npm install

      - name: Run Tests
        run: npm test                     # Adjust if your project has a different test command

      - name: Build Application
        run: npm run build                # Adjust if your project has a different build command

      # 4. Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # 5. Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 6. Build, tag, and push Docker image to ECR
      - name: Build, Tag, and Push Docker Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # 7. Deploy to EC2 via SSH
      - name: Deploy to EC2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@$EC2_HOST -p $SSH_PORT << 'EOF'
            # Login to ECR from EC2
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            # Stop and remove any existing container
            docker stop angularjs-container || true
            docker rm angularjs-container || true
            # Pull and run the new image
            docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker run -d --name angularjs-container -p 80:3000 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
          rm -f private_key.pem